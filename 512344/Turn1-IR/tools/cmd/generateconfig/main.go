// tools/cmd/generateconfig/main.go
package main

import (
	"fmt"
	"os"
	"path/filepath"
)

func main() {
	// Define the path to the JSON file relative to the current directory
	jsonFile := filepath.Join("..", "config", "user_preferences.json")

	// Read the JSON file
	bytes, err := os.ReadFile(jsonFile)
	if err != nil {
		fmt.Printf("Error reading JSON file: %s\n", err)
		os.Exit(1)
	}

	// Generate Go code for the struct based on the JSON content
	generatedGoCode := generateStructFile("config", "UserPreferences", string(bytes))

	// Define the output file path
	outputFile := filepath.Join("..", "config", "auto_generated.go")

	// Write the generated Go code to the output file
	err = os.WriteFile(outputFile, []byte(generatedGoCode), 0644)
	if err != nil {
		fmt.Printf("Error writing Go file: %s\n", err)
		os.Exit(1)
	}

	fmt.Println("Structs generated successfully.")
}

// generateStructFile generates the Go struct code for a given JSON schema.
func generateStructFile(packageName, structName, jsonContent string) string {
	// This is a mock-up: real case might include parsing JSON and reflecting
	return fmt.Sprintf(`
// Code generated by generateconfig; DO NOT EDIT.

package %s

type %s struct {
    Username           string `+"`json:\"username\"`"+`
    Theme              string `+"`json:\"theme\"`"+`
    NotificationsEnabled bool `+"`json:\"notifications_enabled\"`"+`
    Preferences        struct {
        Language string `+"`json:\"language\"`"+`
        Timezone string `+"`json:\"timezone\"`"+`
    } `+"`json:\"preferences\"`"+`
}
`, packageName, structName)
}
