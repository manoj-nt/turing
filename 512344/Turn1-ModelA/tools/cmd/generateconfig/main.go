// tools/cmd/generateconfig/main.go
package main

import (
	"fmt"
	"os"
)

func main() {
	jsonFile := "../config/user_preferences.json" // Path to the initial sample configuration file

	// Read the JSON file
	bytes, err := os.ReadFile(jsonFile)
	if err != nil {
		fmt.Println("Error reading JSON file:", err)
		os.Exit(1)
	}

	// For demonstration, let's assume we have a static struct generation
	// In practice, you might parse the JSON and reflect on its fields semi-dynamically
	generatedGoCode := generateStructFile("", "UserPreferences", string(bytes))

	err = os.WriteFile("../config/auto_generated.go", []byte(generatedGoCode), 0644)
	if err != nil {
		fmt.Println("Error writing Go file:", err)
		os.Exit(1)
	}

	fmt.Println("Structs generated successfully.")
}

func generateStructFile(packageName, structName, jsonContent string) string {
	// This is a mock-up: real case might include parsing JSON and reflecting
	return fmt.Sprintf(`
// Code generated by generateconfig; DO NOT EDIT.

package config

type %s struct {
    Username           string `+"`json:\"username\"`"+`
    Theme              string `+"`json:\"theme\"`"+`
    NotificationsEnabled bool `+"`json:\"notifications_enabled\"`"+`
    Preferences        struct {
        Language string `+"`json:\"language\"`"+`
        Timezone string `+"`json:\"timezone\"`"+`
    } `+"`json:\"preferences\"`"+`
}
`, structName)
}
