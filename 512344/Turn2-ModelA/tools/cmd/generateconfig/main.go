// tools/cmd/generateconfig/main.go
package main

import (
	"encoding/json"
	"fmt"
	"os"
	"strings"
)

// Function to convert JSON structure to Go struct
func generateGoStruct(prefix string, jsonObj map[string]interface{}) string {
	var sb strings.Builder
	for key, value := range jsonObj {
		keyName := strings.Title(key) // Capitalize the key for export
		switch value.(type) {
		case bool:
			sb.WriteString(fmt.Sprintf("%s %s `json:\"%s\"`\n", keyName, "bool", key))
		case float64:
			sb.WriteString(fmt.Sprintf("%s %s `json:\"%s\"`\n", keyName, "float64", key))
		case string:
			sb.WriteString(fmt.Sprintf("%s %s `json:\"%s\"`\n", keyName, "string", key))
		case map[string]interface{}:
			sb.WriteString(fmt.Sprintf("%s struct {\n%s} `json:\"%s\"`\n", keyName, generateGoStruct(prefix+"  ", value.(map[string]interface{})), key))
		case []interface{}:
			// Assuming homogeneous array
			sb.WriteString(fmt.Sprintf("%s []interface{} `json:\"%s\"`\n", keyName, key))
		default:
			// If unknown type, marshal back to JSON and use interface{}
			sb.WriteString(fmt.Sprintf("%s interface{} `json:\"%s\"`\n", keyName, key))
		}
	}
	return prefix + sb.String()
}

func main() {
	// Load and parse the JSON file
	jsonFile := "user_preferences.json"
	bytes, err := os.ReadFile(jsonFile)
	if err != nil {
		fmt.Printf("Error reading JSON file: %s\n", err)
		os.Exit(1)
	}

	// Unmarshal JSON content into a map structure
	var jsonObj map[string]interface{}
	if err := json.Unmarshal(bytes, &jsonObj); err != nil {
		fmt.Printf("Error parsing JSON: %s\n", err)
		os.Exit(1)
	}

	// Generate Go struct code
	structCode := fmt.Sprintf(`
// Code generated by generateconfig; DO NOT EDIT.

package config

type UserPreferences struct {
%s}
`, generateGoStruct("    ", jsonObj))

	// Write to an output Go file
	outputFile := "auto_generated.go"
	err = os.WriteFile(outputFile, []byte(structCode), 0644)
	if err != nil {
		fmt.Printf("Error writing Go file: %s\n", err)
		os.Exit(1)
	}

	fmt.Println("Go structs generated successfully.")
}
