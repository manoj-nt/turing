// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCallback is a mock of Callback interface.
type MockCallback struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackMockRecorder
}

// MockCallbackMockRecorder is the mock recorder for MockCallback.
type MockCallbackMockRecorder struct {
	mock *MockCallback
}

// NewMockCallback creates a new mock instance.
func NewMockCallback(ctrl *gomock.Controller) *MockCallback {
	mock := &MockCallback{ctrl: ctrl}
	mock.recorder = &MockCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallback) EXPECT() *MockCallbackMockRecorder {
	return m.recorder
}

// ProcessData mocks base method.
func (m *MockCallback) ProcessData(data string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessData", data)
	ret0, _ := ret[0].(string)
	return ret0
}

// ProcessData indicates an expected call of ProcessData.
func (mr *MockCallbackMockRecorder) ProcessData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessData", reflect.TypeOf((*MockCallback)(nil).ProcessData), data)
}
